name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_PREFIX: order-payment-microservices

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [order-microservice, payment-microservice2, products-microservice]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Test ${{ matrix.service }}
      run: |
        cd ${{ matrix.service }}
        mvn clean test
        
    - name: Build ${{ matrix.service }}
      run: |
        cd ${{ matrix.service }}
        mvn clean package -DskipTests

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and push Order Service
      uses: docker/build-push-action@v5
      with:
        context: ./order-microservice
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/order-service:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Payment Service
      uses: docker/build-push-action@v5
      with:
        context: ./payment-microservice2
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/payment-service:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Products Service
      uses: docker/build-push-action@v5
      with:
        context: ./products-microservice
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/products-service:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy to ECS
      run: |
        chmod +x deploy-to-ecs.sh
        ./deploy-to-ecs.sh
        
    - name: Wait for deployment
      run: |
        aws ecs wait services-stable \
          --cluster order-payment-cluster \
          --services order-payment-service \
          --region ${{ env.AWS_REGION }}
          
    - name: Get service URL
      run: |
        echo "Service deployed successfully!"
        echo "Check the ECS console for the load balancer URL" 